# -*- coding: utf-8 -*-
"""Q_3DBERT_PREDICTION_part_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Pnhaqk7Oria773iRJf26bt8LK1WnlJFw

**Install necessary libraries and packages**
"""

!pip install torch
import torch
import pandas as pd
from tqdm.notebook import tqdm

"""**Import the data set**"""

import pandas as pd
input_df = pd.read_csv('/content/Twitter_Data.csv')

"""**Only 20% of Data used for Training and Inference**"""

df = input_df.sample(frac=0.2, random_state=42)

df

"""**Find the Null value**"""

df.isnull().sum()

"""**Drop the null value**"""

df.dropna(inplace=True)

"""**check after the Drop the null**"""

df.isnull().sum()

"""**Convert the label from folat to Integer**"""

df['category'] = df['category'].astype(int)

df

"""**Unique Value of label**"""

unique_values = df['category'].unique()

unique_values

"""**Now Map the label to string**"""

mapping = {
    -1: 'negative',
    0: 'neutral',
    1: 'positive'
}

# Apply the mapping
df['category'] = df['category'].map(mapping)

df

df.columns

#info
df.info()

df.clean_text.iloc[10]

"""**count number no label**"""

df.category.value_counts()

import matplotlib.pyplot as plt
import seaborn as sns

#plot class distribution
plt.figure(figsize=(10, 5))
sns.countplot(df.category, palette='Spectral')
plt.xlabel('Classes')
plt.title('Class Distribution');

#store classes into an array
possible_labels = df.category.unique()
possible_labels

#convert labels into numeric values
label_dict = {}
for index, possible_label in enumerate(possible_labels):
    label_dict[possible_label] = index

label_dict

#convert labels into numeric values
df['label'] = df.category.replace(label_dict)
df.head(10)

#need equal length sentences
#plot hist of sentence length
plt.figure(figsize=(10, 5))
sns.histplot([len(s) for s in df.clean_text], bins=100)
plt.title('Sentence Length')
plt.show()

"""**find the maximum length In clean Text**"""

max_len = max([len(sent) for sent in df.clean_text])
print('Max length: ', max_len)

from sklearn.model_selection import train_test_split

#train test split
X_train, X_val, y_train, y_val = train_test_split(df.index.values,
                                                   df.label.values,
                                                   test_size = 0.15,
                                                   random_state = 17,
                                                   stratify = df.label.values)

"""**create new column**"""

df['data_type'] = ['not_set'] * df.shape[0]
df.head()

#fill in data type
df.loc[X_train, 'data_type'] = 'train'
df.loc[X_val, 'data_type'] = 'val'

df.groupby(['category', 'label', 'data_type']).count()

!pip install transformers

from transformers import BertTokenizer
from torch.utils.data import TensorDataset

"""**load tokenizer**"""

tokenizer = BertTokenizer.from_pretrained('bert-base-uncased',
                                         do_lower_case = True)

"""**tokenize train set**"""

encoded_data_train = tokenizer.batch_encode_plus(df[df.data_type == 'train'].clean_text.values,
                                                add_special_tokens = True,
                                                return_attention_mask = True,
                                                pad_to_max_length = True,
                                                max_length = 270,
                                                return_tensors = 'pt')

"""**tokenizer val set**"""

encoded_data_val = tokenizer.batch_encode_plus(df[df.data_type == 'val'].clean_text.values,
                                                #add_special_tokens = True,
                                                return_attention_mask = True,
                                                pad_to_max_length = True,
                                                max_length = 270,
                                                return_tensors = 'pt')

encoded_data_train

"""Used for encode train set"""

input_ids_train = encoded_data_train['input_ids']
attention_masks_train = encoded_data_train['attention_mask']
labels_train = torch.tensor(df[df.data_type == 'train'].label.values)

"""**used for encode val set**"""

input_ids_val = encoded_data_val['input_ids']
attention_masks_val = encoded_data_val['attention_mask']
#convert data type to torch.tensor
labels_val = torch.tensor(df[df.data_type == 'val'].label.values)

input_ids_train

attention_masks_train

labels_train

"""**create dataloader**"""

dataset_train = TensorDataset(input_ids_train,
                              attention_masks_train,
                              labels_train)

dataset_val = TensorDataset(input_ids_val,
                             attention_masks_val,
                             labels_val)

print(len(dataset_train))
print(len(dataset_val))

dataset_train

dataset_train.tensors

"""**load pre-trained BERT bert-base-uncased**"""

from transformers import BertForSequenceClassification

model = BertForSequenceClassification.from_pretrained('bert-base-uncased',
                                                      num_labels = len(label_dict),
                                                      output_attentions = False,
                                                      output_hidden_states = False)

"""**model summary**"""

model.config

from torch.utils.data import DataLoader, RandomSampler, SequentialSampler

batch_size = 4
dataloader_train = DataLoader(dataset_train,sampler = RandomSampler(dataset_train),batch_size = batch_size)
dataloader_val = DataLoader(dataset_val,sampler = RandomSampler(dataset_val),batch_size = 32)

from transformers import AdamW, get_linear_schedule_with_warmup
epochs = 10

optimizer = AdamW(model.parameters(),
                 lr = 1e-5,
                 eps = 1e-8)

scheduler = get_linear_schedule_with_warmup(optimizer,num_warmup_steps = 0,num_training_steps = len(dataloader_train)*epochs)

import numpy as np
from sklearn.metrics import f1_score

def f1_score_func(preds, labels):
    preds_flat = np.argmax(preds, axis=1).flatten()
    labels_flat = labels.flatten()
    return f1_score(labels_flat, preds_flat, average = 'weighted')

def accuracy_per_class(preds, labels):
    label_dict_inverse = {v: k for k, v in label_dict.items()}

    preds_flat = np.argmax(preds, axis=1).flatten()
    labels_flat = labels.flatten()

    for label in np.unique(labels_flat):
        y_preds = preds_flat[labels_flat==label]
        y_true = labels_flat[labels_flat==label]
        print(f'Class: {label_dict_inverse[label]}')
        print(f'Accuracy:{len(y_preds[y_preds==label])}/{len(y_true)}\n')

def evaluate(dataloader_val):
    model.eval()

    loss_val_total = 0
    predictions, true_vals = [], []

    for batch in tqdm(dataloader_val):
        batch = tuple(b.to(device) for b in batch)

        inputs = {'input_ids':      batch[0],
                  'attention_mask': batch[1],
                  'labels':         batch[2]}
        with torch.no_grad():
            outputs = model(**inputs)
        loss = outputs[0]
        logits = outputs[1]
        loss_val_total += loss.item()
        logits = logits.detach().cpu().numpy()
        label_ids = inputs['labels'].cpu().numpy()
        predictions.append(logits)
        true_vals.append(label_ids)
    loss_val_avg = loss_val_total/len(dataloader_val)
    predictions = np.concatenate(predictions, axis=0)
    true_vals = np.concatenate(true_vals, axis=0)

    return loss_val_avg, predictions, true_vals

import random

seed_val = 17
random.seed(seed_val)
np.random.seed(seed_val)
torch.manual_seed(seed_val)
torch.cuda.manual_seed_all(seed_val)

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model.to(device)
print(device)

for epoch in tqdm(range(1, epochs+1)):
    model.train()
    loss_train_total = 0
    progress_bar = tqdm(dataloader_train,
                        desc='Epoch {:1d}'.format(epoch),
                        leave=False,
                        disable=False)

    for batch in progress_bar:
        model.zero_grad()
        batch = tuple(b.to(device) for b in batch)
        inputs = {'input_ids': batch[0],
                  'attention_mask': batch[1],
                  'labels': batch[2]}

        outputs = model(**inputs)
        loss = outputs[0]
        loss_train_total +=loss.item()
        loss.backward()
        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)
        optimizer.step()
        scheduler.step()

        progress_bar.set_postfix({'training_loss': '{:.3f}'.format(loss.item()/len(batch))})

    tqdm.write('\nEpoch {epoch}')
    loss_train_avg = loss_train_total/len(dataloader_train)
    tqdm.write(f'Training loss: {loss_train_avg}')

    val_loss, predictions, true_vals = evaluate(dataloader_val)
    val_f1 = f1_score_func(predictions, true_vals)
    tqdm.write(f'Validation loss: {val_loss}')
    tqdm.write(f'F1 Score (weighted): {val_f1}')

outputs.loss

outputs.logits

#save model
model.to(device)
pass

#evaluate
_, predictions, true_vals = evaluate(dataloader_val)

accuracy_per_class(predictions, true_vals)

from sklearn.metrics import precision_score, recall_score, confusion_matrix
model.eval()
predictions, true_vals = [], []

for batch in dataloader_val:
    batch = tuple(b.to(device) for b in batch)

    with torch.no_grad():
        inputs = {'input_ids': batch[0],
                  'attention_mask': batch[1],
                  'labels': batch[2]}
        outputs = model(**inputs)

    logits = outputs[1]
    preds = logits.detach().cpu().numpy()
    label_ids = inputs['labels'].cpu().numpy()

    predictions.append(preds)
    true_vals.append(label_ids)

predictions = np.concatenate(predictions, axis=0)
true_vals = np.concatenate(true_vals, axis=0)

precision = precision_score(true_vals, np.argmax(predictions, axis=1), average='macro')
recall = recall_score(true_vals, np.argmax(predictions, axis=1), average='macro')
cm = confusion_matrix(true_vals, np.argmax(predictions, axis=1))

print(f'Precision: {precision:.4f}')
print(f'Recall: {recall:.4f}')
print('Confusion Matrix:')
print(cm)